mesh_dir: 'models/' # Default directory for meshes
robot_cfg:
  name: piper_2arm_table
  asset_cfg:
    asset_dir: ${mesh_dir} # Directory for assets
    urdf_path: 'models/piper/piper_table/piper_2arm_gripper_table.urdf' # Path to the URDF file
    xml_path: 'models/piper/piper_table/piper_2arm_gripper_table.xml' # If you have xml file, specify the path here or just use urdf file here as well
  ignore_collision_pairs: []
  control_dt: 0.02 # Control loop frequency - if we are using joint trajectory controller, it is enough
  eef_type: parallel_gripper # Type of end effector: 'hand', 'power_gripper', 'parallel_gripper'
  limb_joint_names:
    robot1: ['robot1/joint1', 'robot1/joint2', 'robot1/joint3', 'robot1/joint4', 'robot1/joint5', 'robot1/joint6']
    robot2: ['robot2/joint1', 'robot2/joint2', 'robot2/joint3', 'robot2/joint4', 'robot2/joint5', 'robot2/joint6']
  hand_joint_names: # hand names
    robot1: ['robot1/gripper']
    robot2: ['robot2/gripper']

  hand_limits:
    robot1: [[0.035, 0.0]]
    robot2: [[0.035, 0.0]]

  max_joint_vel: 5.0 # Maximum joint velocity
  end_effector_link:
    robot1: 'robot1/link6'
    robot2: 'robot2/link6'

  init_qpos: [0.5022, 1.0062, -0.8032, 0, 0.6269, 0, 0.035,
              -0.5022, 1.0062, -0.8032, 0, 0.6269, 0, 0.035]
  viewer_args:
    mujoco:
      azimuth: 30.50000000000012
      distance: 2.1519515483159832
      elevation: -23.37500000000002
      lookat: [-0.014732298140262726, 0.08041974799482357, 0.6942176955514859]
    isaacgym:
      cam_pos: [1.41, -0.36, 0.58]
      cam_target: [0.45, -0.23, 0.31]
    trimesh:
      pq:  [1.6723996641513676, -0.7507286806222732, 0.8682281906897257, 0.687230565118163, 0.4897546511147104, 0.2564309495761239, 0.4712724267113097]
ik_cfg: # information for inverse kinematics. Use single arm model for each arm.
  # the number of arms in the urdf file, the name of the robot does not matter, but order matters.
  robot1:
    # chain of joint names from base to end effector in ik_model
    joint_names: ['robot1/joint1', 'robot1/joint2', 'robot1/joint3', 'robot1/joint4', 'robot1/joint5', 'robot1/joint6']
    ee_link: robot1/link6
    dt: 0.05
    asset_dir: ${mesh_dir} # Directory for assets
    urdf_path: 'models/piper/piper/piper.urdf'
    ik_damping: 0.075
    eps: 1e-3
    base_link: robot1/link1 # base_link in the original urdf file,not the base_link in the ik model

  robot2:
    joint_names: ['robot1/joint1', 'robot1/joint2', 'robot1/joint3', 'robot1/joint4', 'robot1/joint5', 'robot1/joint6']
    ee_link: robot1/link6
    dt: 0.05
    asset_dir: ${mesh_dir} # Directory for assets
    urdf_path: 'models/piper/piper/piper.urdf'
    ik_damping: 0.075
    eps: 1e-3
    base_link: robot2/link1 # base_link in the original urdf file,not the base_link in the ik model

ros1_cfg:
  lp_filter_alpha: 0.9
  motion_planning: 'moveit' # moveit or interpolation
  moveit:
    namespace: '/followers'
    arm_group_name: 'arm1_2'
    hand_group_name: ''
    num_planning_attempts: 30
    planning_time: 20.0
    max_velocity_scaling_factor: 0.1
    max_acceleration_scaling_factor: 0.1
    use_move_group_action: True
  state_sub_topic: '/joint_states' # Topic to subscribe for joint states
  state_sub_msg_type: 'sensor_msgs/msg/JointState' # Message type for joint states
  robots:
    robot1:
      arm_control_topic: '/arm1_controller/joint_trajectory'
      arm_control_msg_type: 'JointTrajectory'
      hand_control_topic: null
      hand_control_msg_type: 'JointTrajectory'
      arm_state_sub_topic: ${...state_sub_topic}
      hand_state_sub_topic: ${...state_sub_topic}
      arm_state_sub_msg_type: ${...state_sub_msg_type}
      hand_state_sub_msg_type: ${...state_sub_msg_type}
    robot2:
      arm_control_topic: '/arm2_controller/command'
      arm_control_msg_type: 'JointTrajectory'
      hand_control_topic: null
      hand_control_msg_type: 'JointTrajectory'
      arm_state_sub_topic: ${...state_sub_topic}
      hand_state_sub_topic: ${...state_sub_topic}
      arm_state_sub_msg_type: ${...state_sub_msg_type}
      hand_state_sub_msg_type: ${...state_sub_msg_type}
  cameras: []

ros2_cfg:
  lp_filter_alpha: 0.8
  motion_planning: 'moveit' # moveit or interpolation
  moveit:
    namespace: 'followers'
    arm_group_name: 'arm1_2'
    hand_group_name: null
    num_planning_attempts: 30
    planning_time: 20.0
    max_velocity_scaling_factor: 0.1
    max_acceleration_scaling_factor: 0.1
    use_move_group_action: True
  state_sub_topic: '/joint_states' # Topic to subscribe for joint states
  state_sub_msg_type: 'sensor_msgs/msg/JointState' # Message type for joint states
  robots:
    robot1:
      arm_control_topic: '/arm1_controller/joint_trajectory'
      arm_control_msg_type: 'JointTrajectory'
      hand_control_topic: '/gripper1_controller/joint_trajectory'
      hand_control_msg_type: 'JointTrajectory'
      arm_state_sub_topic: ${...state_sub_topic}
      hand_state_sub_topic: ${...state_sub_topic}
      arm_state_sub_msg_type: ${...state_sub_msg_type}
      hand_state_sub_msg_type: ${...state_sub_msg_type}
    robot2:
      arm_control_topic: '/arm2_controller/joint_trajectory'
      arm_control_msg_type: 'JointTrajectory'
      hand_control_topic: '/gripper2_controller/joint_trajectory'
      hand_control_msg_type: 'JointTrajectory'
      arm_state_sub_topic: ${...state_sub_topic}
      hand_state_sub_topic: ${...state_sub_topic}
      arm_state_sub_msg_type: ${...state_sub_msg_type}
      hand_state_sub_msg_type: ${...state_sub_msg_type}
camera_cfg: null